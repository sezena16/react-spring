{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Computer\\\\Desktop\\\\homework\\\\src\\\\main\\\\frontend\\\\src\\\\components\\\\map_components\\\\SimpleMap.js\";\nimport React, { Component } from 'react';\nimport isEmpty from 'lodash.isempty'; // components:\n\nimport Marker from '../components/Marker'; // examples:\n\nimport GoogleMap from '../components/GoogleMap'; // consts\n\nimport LOS_ANGELES_CENTER from '../const/la_center'; // Return map bounds based on list of places\n\nconst getMapBounds = (map, maps, places) => {\n  const bounds = new maps.LatLngBounds();\n  places.forEach(place => {\n    bounds.extend(new maps.LatLng(place.geometry.location.lat, place.geometry.location.lng));\n  });\n  return bounds;\n}; // Re-center map when resizing the window\n\n\nconst bindResizeListener = (map, maps, bounds) => {\n  maps.event.addDomListenerOnce(map, 'idle', () => {\n    maps.event.addDomListener(window, 'resize', () => {\n      map.fitBounds(bounds);\n    });\n  });\n}; // Fit map to its bounds after the api is loaded\n\n\nconst apiIsLoaded = (map, maps, places) => {\n  // Get bounds by our places\n  const bounds = getMapBounds(map, maps, places); // Fit map to bounds\n\n  map.fitBounds(bounds); // Bind the resize listener\n\n  bindResizeListener(map, maps, bounds);\n};\n\nclass SimpleMap extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      places: []\n    };\n  }\n\n  componentDidMount() {\n    fetch('places.json').then(response => response.json()).then(data => this.setState({\n      places: data.results\n    }));\n  }\n\n  render() {\n    const {\n      places\n    } = this.state;\n    return /*#__PURE__*/React.createElement(React.Fragment, null, !isEmpty(places) && /*#__PURE__*/React.createElement(GoogleMap, {\n      defaultZoom: 10,\n      defaultCenter: LOS_ANGELES_CENTER,\n      yesIWantToUseGoogleMapApiInternals: true,\n      onGoogleApiLoaded: ({\n        map,\n        maps\n      }) => apiIsLoaded(map, maps, places),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 21\n      }\n    }, places.map(place => /*#__PURE__*/React.createElement(Marker, {\n      key: place.id,\n      text: place.name,\n      lat: place.geometry.location.lat,\n      lng: place.geometry.location.lng,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 29\n      }\n    }))));\n  }\n\n}\n\nexport default SimpleMap;","map":{"version":3,"sources":["C:/Users/Computer/Desktop/homework/src/main/frontend/src/components/map_components/SimpleMap.js"],"names":["React","Component","isEmpty","Marker","GoogleMap","LOS_ANGELES_CENTER","getMapBounds","map","maps","places","bounds","LatLngBounds","forEach","place","extend","LatLng","geometry","location","lat","lng","bindResizeListener","event","addDomListenerOnce","addDomListener","window","fitBounds","apiIsLoaded","SimpleMap","constructor","props","state","componentDidMount","fetch","then","response","json","data","setState","results","render","id","name"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport isEmpty from 'lodash.isempty';\r\n\r\n// components:\r\nimport Marker from '../components/Marker';\r\n\r\n// examples:\r\nimport GoogleMap from '../components/GoogleMap';\r\n\r\n// consts\r\nimport LOS_ANGELES_CENTER from '../const/la_center';\r\n\r\n// Return map bounds based on list of places\r\nconst getMapBounds = (map, maps, places) => {\r\n    const bounds = new maps.LatLngBounds();\r\n\r\n    places.forEach((place) => {\r\n        bounds.extend(new maps.LatLng(\r\n            place.geometry.location.lat,\r\n            place.geometry.location.lng,\r\n        ));\r\n    });\r\n    return bounds;\r\n};\r\n\r\n// Re-center map when resizing the window\r\nconst bindResizeListener = (map, maps, bounds) => {\r\n    maps.event.addDomListenerOnce(map, 'idle', () => {\r\n        maps.event.addDomListener(window, 'resize', () => {\r\n            map.fitBounds(bounds);\r\n        });\r\n    });\r\n};\r\n\r\n// Fit map to its bounds after the api is loaded\r\nconst apiIsLoaded = (map, maps, places) => {\r\n    // Get bounds by our places\r\n    const bounds = getMapBounds(map, maps, places);\r\n    // Fit map to bounds\r\n    map.fitBounds(bounds);\r\n    // Bind the resize listener\r\n    bindResizeListener(map, maps, bounds);\r\n};\r\n\r\nclass SimpleMap extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            places: [],\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch('places.json')\r\n            .then((response) => response.json())\r\n            .then((data) => this.setState({ places: data.results }));\r\n    }\r\n\r\n    render() {\r\n        const { places } = this.state;\r\n        return (\r\n            <>\r\n                {!isEmpty(places) && (\r\n                    <GoogleMap\r\n                        defaultZoom={10}\r\n                        defaultCenter={LOS_ANGELES_CENTER}\r\n                        yesIWantToUseGoogleMapApiInternals\r\n                        onGoogleApiLoaded={({ map, maps }) => apiIsLoaded(map, maps, places)}\r\n                    >\r\n                        {places.map((place) => (\r\n                            <Marker\r\n                                key={place.id}\r\n                                text={place.name}\r\n                                lat={place.geometry.location.lat}\r\n                                lng={place.geometry.location.lng}\r\n                            />\r\n                        ))}\r\n                    </GoogleMap>\r\n                )}\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SimpleMap;"]},"metadata":{},"sourceType":"module"}